<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Linq.Expressions;

namespace Kladzey.LinqBuddy
{
    public static partial class LambdaExpressionExtensions
    {
<# for (var i = 0; i < 17; ++i) {
    var argRange = Enumerable.Range(1, i); 
    var generics = string.Concat(argRange.Select(j => $"T{j}, ")) + "TResult"; #>
        /// <summary>
        /// Call expression.
        /// </summary>
<# for (var j = 0; j < i; ++j) { #>
        /// <typeparam name="T<#= j + 1 #>">The type of argument <#= j + 1 #>.</typeparam>
<# } #>
        /// <typeparam name="TResult">The type of the return value.</typeparam>
        /// <param name="expression">Expression to call.</param>
<# for (var j = 0; j < i; ++j) { #>
        /// <param name="arg<#= j + 1 #>">Argument <#= j + 1 #>.</param>
<# } #>
        /// <returns>Result.</returns>
        public static TResult Call<<#= generics #>>(this Expression<Func<<#= generics #>>> expression<#= string.Concat(argRange.Select(j => $", T{j} arg{j}")) #>)
        {
            return expression.Compile().Invoke(<#= string.Join(", ", argRange.Select(j => $"arg{j}")) #>);
        }

<# } #>
    }
}